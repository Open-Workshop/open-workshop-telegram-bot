import json
import time
import telebot
import requests
import pymorphy2
import email.utils
from urllib.parse import urlparse
from urllib.parse import parse_qs
from telebot.async_telebot import AsyncTeleBot

with open('key.json', 'r') as file:
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    API_TOKEN = json.load(file)["key"]

bot = AsyncTeleBot(API_TOKEN)

# Handle '/start' and '/help'
@bot.message_handler(commands=['help', 'start', "—Å—Ç–∞—Ä—Ç", "–ø–æ–º–æ—â—å"])
async def send_welcome(message):
    await bot.reply_to(message, """\
–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å –º–æ–¥—ã —Å–æ *Steam* —á–µ—Ä–µ–∑ —á–∞—Ç *Telegram!* üí®\n
–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ –Ω–µ—Å—É—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ–º—ã–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –∏ –≤–∞—à–∏ –Ω–∞–º–µ—Ä–µ–Ω—å—è –∫–∞–∫ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å. üìÑ\n
–ê —Ç–∞–∫ –∂–µ –ø—Ä–æ–¥–æ–ª–∂–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –∏–≥—Ä—É/–ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ –æ–¥–Ω–æ–π –∏–∑ –ø–ª–æ—â–∞–¥–æ–∫ –≥–¥–µ –æ–Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞! üõí
    """, parse_mode="Markdown")
    await bot.reply_to(message, """\
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å `ZIP` –∞—Ä—Ö–∏–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–æ–¥ –∏–ª–∏ `ID` –º–æ–¥–∞ –≤ *Steam* –∏ –±–æ—Ç –≤ –æ—Ç–≤–µ—Ç –¥–∞—Å—Ç `ZIP` –∞—Ä—Ö–∏–≤ ü§ù
    """, parse_mode="Markdown")


@bot.message_handler(commands=['project', '–ø—Ä–æ–µ–∫—Ç'])
async def send_welcome(message):
    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton(text='–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—Ä–æ–µ–∫—Ç–∞', url='https://github.com/Miskler/pytorrent'))
    markup.add(telebot.types.InlineKeyboardButton(text='Telegram –∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞', url='https://t.me/sphere_games'))
    markup.add(telebot.types.InlineKeyboardButton(text='API –±–æ—Ç–∞', url='https://43093.zetalink.ru:8000/docs'))
    await bot.send_message(message.chat.id, '–≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π **open-source** –ø—Ä–æ–µ–∫—Ç —Å **–æ—Ç–∫—Ä—ã—Ç—ã–º API**! üòç', parse_mode="Markdown", reply_markup=markup)


# Handle all other messages with content_type 'text' (content_types defaults to ['text'])
@bot.message_handler(func=lambda message: True)
async def echo_message(message):
    try:
        start_time = time.time()
        mes = message.text

        if mes.startswith("https://steamcommunity.com/sharedfiles/filedetails/") or mes.startswith("https://steamcommunity.com/workshop/filedetails/"):
            parsed = urlparse(mes,
                         "highlight=params#url-parsing")
            captured_value = parse_qs(parsed.query)
            try:
                mes = captured_value['id'][0]
            except:
                await bot.reply_to(message, "–¢—ã –º–Ω–µ –∫–∞–∫—É—é-—Ç–æ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Å–∫–∏–Ω—É–ª! üßê")

        if mes.isdigit():
            mes = int(mes)
            if mes <= 0:
                await bot.reply_to(message, "–Ø –¥–∞–∂–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞—é, —á—Ç–æ —Ç–∞–∫–æ–≥–æ –º–æ–¥–∞ –Ω–µ—Ç—É :)")
            else:
                try:
                    result = requests.get(url=f"https://43093.zetalink.ru:8000/download/steam/{str(mes)}", timeout=5)
                except:
                    await bot.reply_to(message, "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç üòî _(point=1)_", parse_mode="Markdown")
                    return -1

                if result.headers.get('content-type') == "application/zip":
                    await bot.send_document(
                        message.chat.id,
                        visible_file_name=get_name(result.headers["content-disposition"]),
                        document=result.content,
                        reply_to_message_id=message.id,
                        timeout=10)
                    await bot.reply_to(message, f"–í–∞—à –∑–∞–ø—Ä–æ—Å –∑–∞–Ω—è–ª {format_seconds(round(time.time()-start_time, 1))}")
                elif result.headers.get('content-type') == "application/json":
                    data = json.loads(result.content)
                    if data["error_id"] == 0 or data["error_id"] == 3:
                        await bot.reply_to(message, "–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç—É —ç—Ç–æ–≥–æ –º–æ–¥–∞, –Ω–æ –æ–Ω —Å–µ–π—á–∞—Å –µ–≥–æ –∑–∞–≥—Ä—É–∑–∏—Ç! _(—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è)_", parse_mode="Markdown")
                        if data.get("unsuccessful_attempts", None) == True:
                            await bot.reply_to(message, "–†–∞–Ω–µ–µ —ç—Ç–æ—Ç –º–æ–¥ –Ω–µ —É–¥–∞–≤–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å!", parse_mode="Markdown")

                        for i in range(60):
                            time.sleep(1)
                            try:
                                res = requests.get(url=f"https://43093.zetalink.ru:8000/info/mod/{str(mes)}",
                                                        timeout=10)
                            except:
                                await bot.reply_to(message, "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç üòî _(point=2)_", parse_mode="Markdown")
                                return -1
                            if res.headers.get('content-type') == "application/json":
                                data = json.loads(res.content)
                                if data["result"] == None:
                                    await bot.reply_to(message, "–°–µ—Ä–≤–µ—Ä—É –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç—Ç–æ—Ç –º–æ–¥ üò¢")
                                    return -1
                                elif data["result"]["condition"] <= 1:
                                    try:
                                        result = requests.get(
                                            url=f"https://43093.zetalink.ru:8000/download/{str(mes)}", timeout=10)
                                    except:
                                        await bot.reply_to(message, "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç üòî _(point=3)_", parse_mode="Markdown")
                                        return -1

                                    if result.headers.get('content-type') == "application/zip":
                                        await bot.send_document(
                                            message.chat.id,
                                            visible_file_name=get_name(result.headers["content-disposition"]),
                                            document=result.content,
                                            reply_to_message_id=message.id,
                                            timeout=10)
                                        await bot.reply_to(message, f"–í–∞—à –∑–∞–ø—Ä–æ—Å –∑–∞–Ω—è–ª {format_seconds(round(time.time()-start_time, 1))}")
                                    else:
                                        await bot.reply_to(message, "–°–µ—Ä–≤–µ—Ä –ø—Ä–∏—Å–ª–∞–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç üòß _(point=4)_",
                                                           parse_mode="Markdown")

                                    return
                            else:
                                await bot.reply_to(message, "–°–µ—Ä–≤–µ—Ä –ø—Ä–∏—Å–ª–∞–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç üòß _(point=1)_", parse_mode="Markdown")
                                return
                        await bot.reply_to(message, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞!")
                        return -1

                    elif data["error_id"] == 1:
                        await bot.reply_to(message,
                            "–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏ –Ω–µ –º–æ–∂–µ—Ç —Å–µ–π—á–∞—Å –≥—Ä—É–∑–∏—Ç—å –º–æ–¥—ã! –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç :)")
                    elif data["error_id"] == 2:
                        await bot.reply_to(message, "–°–µ—Ä–≤–µ—Ä –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ —Ç–∞–∫–æ–≥–æ –º–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç üò¢")
                    else:
                        await bot.reply_to(message, "–°–µ—Ä–≤–µ—Ä –ø—Ä–∏—Å–ª–∞–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç üòß _(point=2)_", parse_mode="Markdown")
                else:
                    await bot.reply_to(message, "–°–µ—Ä–≤–µ—Ä –ø—Ä–∏—Å–ª–∞–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç üòß _(point=3)_", parse_mode="Markdown")
        else:
            if mes.startswith("https://steamcommunity.com") or mes.startswith("https://store.steampowered.com"):
                await bot.reply_to(message, "–ú–Ω–µ –Ω—É–∂–Ω–∞ —Å—Å—ã–ª–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –Ω–∞ –º–æ–¥! _(–∏–ª–∏ –µ–≥–æ ID)_", parse_mode="Markdown")
            elif mes.startswith("https://") or mes.startswith("http://"):
                await bot.reply_to(message, "–ü–æ–∫–∞ —á—Ç–æ —è —É–º–µ—é —Å–∫–∞—á–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ Steam üòø")
            else:
                await bot.reply_to(message, "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —Å–∫–∞—á–∞—Ç—å –º–æ–¥, —Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–∫–∏–Ω—å —Å—Å—ã–ª–∫—É –∏–ª–∏ `ID` –º–æ–¥–∞ –≤ —á–∞—Ç!", parse_mode="Markdown")
    except:
        await bot.reply_to(message, "–¢—ã –≤—ã–∑–≤–∞–ª —Å—Ç—Ä–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É...\n–ü–æ–ø—Ä–æ–±—É–π –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥ –µ—â–µ —Ä–∞–∑!", parse_mode="Markdown")

def format_seconds(seconds):
    try:
        morph = pymorphy2.MorphAnalyzer()
        word = '—Å–µ–∫—É–Ω–¥–∞'
        parsed_word = morph.parse(word)[0]
        res = f"{seconds} {parsed_word.make_agree_with_number(seconds).word}"
    except:
        res = "ERROR"
    return res

def get_name(head:str):
    if head.startswith("attachment; filename="):
        return head.split("attachment; filename=")[-1]
    else:
        return email.utils.unquote(head.split("filename*=utf-8''")[-1])

import asyncio
asyncio.run(bot.polling())