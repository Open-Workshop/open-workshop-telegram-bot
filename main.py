import io
import json
import time
import tools
import telebot
import requests
from datetime import timedelta
import matplotlib.pyplot as plt
from urllib.parse import urlparse
from urllib.parse import parse_qs
from telebot.async_telebot import AsyncTeleBot

SERVER_ADDRESS = 'https://api.openworkshop.su'
WEBSITE_ADDRESS = 'https://openworkshop.su'

with open('key.json', 'r') as file:
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    API_TOKEN = json.load(file)["key"]

bot = AsyncTeleBot(API_TOKEN)


@bot.message_handler(commands=['help', 'start', "—Å—Ç–∞—Ä—Ç", "–ø–æ–º–æ—â—å"])
async def send_welcome(message):
    await bot.reply_to(message, """\
–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å –º–æ–¥—ã —Å–æ *Steam* —á–µ—Ä–µ–∑ —á–∞—Ç *Telegram!* üí®\n
–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ –Ω–µ—Å—É—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ–º—ã–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –∏ –≤–∞—à–∏ –Ω–∞–º–µ—Ä–µ–Ω—å—è –∫–∞–∫ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å. üìÑ\n
–ê —Ç–∞–∫ –∂–µ –ø—Ä–æ–¥–æ–ª–∂–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –∏–≥—Ä—É/–ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ –æ–¥–Ω–æ–π –∏–∑ –ø–ª–æ—â–∞–¥–æ–∫ –≥–¥–µ –æ–Ω–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞! üõí
    """, parse_mode="Markdown")
    await bot.reply_to(message, """\
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å `ZIP` –∞—Ä—Ö–∏–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–æ–¥ –∏–ª–∏ `ID` –º–æ–¥–∞ –≤ *Steam* –∏ –±–æ—Ç –≤ –æ—Ç–≤–µ—Ç –¥–∞—Å—Ç `ZIP` –∞—Ä—Ö–∏–≤ ü§ù
    """, parse_mode="Markdown")


@bot.message_handler(commands=['project', '–ø—Ä–æ–µ–∫—Ç'])
async def project(message):
    global SERVER_ADDRESS

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton(text='GitHub –ø—Ä–æ–µ–∫—Ç–∞', url='https://github.com/Open-Workshop'))
    markup.add(telebot.types.InlineKeyboardButton(text='Telegram –∫–∞–Ω–∞–ª –∞–≤—Ç–æ—Ä–∞', url='https://t.me/sphere_games'))
    markup.add(telebot.types.InlineKeyboardButton(text='–¢–∞–∫–æ–π –∂–µ –±–æ—Ç –≤ Discord', url='https://discord.com/api/oauth2/authorize?client_id=1137841106852253818&permissions=2148038720&scope=bot%20applications.commands'))
    markup.add(telebot.types.InlineKeyboardButton(text='API –±–æ—Ç–∞', url=SERVER_ADDRESS+'/docs'))
    markup.add(telebot.types.InlineKeyboardButton(text='–°–∞–π—Ç', url=WEBSITE_ADDRESS))

    await bot.send_message(message.chat.id, '–≠—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π **open-source** –ø—Ä–æ–µ–∫—Ç —Å **–æ—Ç–∫—Ä—ã—Ç—ã–º API**! üòç', parse_mode="Markdown", reply_markup=markup)


type_map = None

#TODO —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –Ω–∞ 2 —á–∞—Å—Ç–∏ (–æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –≥—Ä–∞—Ñ–∏–∫–∏)
#TODO —Å–¥–µ–ª–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
@bot.message_handler(commands=['statistics', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'])
async def statistics(message):
    plt.clf()
    global type_map

    try:
        if not type_map:
            res = requests.get(url=SERVER_ADDRESS+"/statistics/info/type_map", headers={"Accept-Language": "ru, en"}, timeout=10)
            info = json.loads(res.content)
            type_map = info["result"]
    except:
        await bot.send_message(message.chat.id, "–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤–æ–∑–Ω–∏–∫–ª–∞ —Å—Ç—Ä–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞...")

    try:
        # –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        res = requests.get(url=SERVER_ADDRESS+"/statistics/hour", timeout=10)
        info = json.loads(res.content)

        output = await tools.graf(info, "date_time")
        for i in output[0].keys():
            plt.plot(output[0][i][0], output[0][i][1], label=type_map.get(i, "ERROR"))

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        plt.title("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–≥–æ–¥–Ω—è")
        plt.xlabel("–ß–∞—Å")
        plt.ylabel("–ö–æ–ª-–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π")
        plt.legend(fontsize='xx-small')
        # –ó–∞–¥–∞–µ–º –º–µ—Ç–∫–∏ –¥–µ–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–∏ x
        plt.xticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏
        buffer = io.BytesIO()
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –±—É—Ñ–µ—Ä
        plt.savefig(buffer, format='png')
        buffer.seek(0)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API
        await bot.send_photo(chat_id=message.chat.id, photo=buffer)
    except:
        await bot.send_message(message.chat.id, "–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å –≤–æ–∑–Ω–∏–∫–ª–∞ —Å—Ç—Ä–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞...")

    try:
        plt.clf()
        # –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        res = requests.get(url=SERVER_ADDRESS+"/statistics/day", timeout=10)
        info = json.loads(res.content)

        output = await tools.graf(info, "date")

        shift = output[1][0].toordinal()
        for i in output[0].keys():
            plt.plot([x - shift for x in output[0][i][0]], output[0][i][1], label=type_map.get(i, "ERROR"))


        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        plt.title("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π")
        plt.xlabel("–î–µ–Ω—å")
        plt.ylabel("–ö–æ–ª-–≤–æ –æ–±—Ä–∞—â–µ–Ω–∏–π")
        plt.legend(fontsize='xx-small')
        # –ó–∞–¥–∞–µ–º –º–µ—Ç–∫–∏ –¥–µ–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–∏ x
        start_value = 0
        end_value = len(output[1])-1
        step = 1

        numbers = list(range(start_value, end_value + 1, step))
        dates = [str(output[1][-1] - timedelta(days=end_value- i)).removesuffix(" 00:00:00").removeprefix("20") for i in range(start_value, end_value + 1, step)]

        plt.xticks(numbers, dates)
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏
        buffer = io.BytesIO()
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –±—É—Ñ–µ—Ä
        plt.savefig(buffer, format='png')
        buffer.seek(0)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API
        await bot.send_photo(chat_id=message.chat.id, photo=buffer)
    except:
        await bot.send_message(message.chat.id, "–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ 7 –¥–Ω–µ–π –≤–æ–∑–Ω–∏–∫–ª–∞ —Å—Ç—Ä–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞...")

    try:
        res = requests.get(url=SERVER_ADDRESS+"/statistics/info/all", timeout=10)
        info = json.loads(res.content)
        await bot.send_message(message.chat.id, f"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {info.get('mods_sent_count')} —Ñ–∞–π–ª–æ–≤.
–°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç {await tools.format_seconds(seconds=info.get('statistics_days', 0), word="–¥–µ–Ω—å")}.

–£ {info.get('games', 0)} –∏–≥—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {info.get('mods', 0)} –º–æ–¥–æ–≤, {info.get('mods_dependencies', 0)} –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –∏–º–µ—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ –º–æ–¥—ã.
–°–µ—Ä–≤–∏—Å—É –∏–∑–≤–µ—Å—Ç–Ω–æ –æ–± {await tools.format_seconds(seconds=info.get('genres', 0), word="–∂–∞–Ω—Ä")} –∏–≥—Ä –∏ {await tools.format_seconds(seconds=info.get('mods_tags', 0), word="—Ç–µ–≥")} –¥–ª—è –º–æ–¥–æ–≤.
        """)
    except:
        await bot.send_message(message.chat.id, "–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ —Å—Ç—Ä–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞...")


#TODO —Å–¥–µ–ª–∞—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º
@bot.message_handler(func=lambda message: True)
async def echo_message(message):
    try:
        start_time = time.time()
        mes = message.text

        if mes.startswith("https://steamcommunity.com/sharedfiles/filedetails/") or mes.startswith("https://steamcommunity.com/workshop/filedetails/"):
            parsed = urlparse(mes, "highlight=params#url-parsing")
            captured_value = parse_qs(parsed.query)
            try:
                mes = captured_value['id'][0]
            except:
                await bot.reply_to(message, "–¢—ã –º–Ω–µ –∫–∞–∫—É—é-—Ç–æ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Å–∫–∏–Ω—É–ª! üßê")

        if mes.isdigit():
            mes = int(mes)
            if mes <= 0:
                await bot.reply_to(message, "–Ø –¥–∞–∂–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞—é, —á—Ç–æ —Ç–∞–∫–æ–≥–æ –º–æ–¥–∞ –Ω–µ—Ç—É :)")
            else:
                try:
                    data = requests.get(url=SERVER_ADDRESS+f"/info/mod/{str(mes)}",
                                        timeout=10)

                    # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 30 –º–± (–ø–æ–ª—É—á–∞—é –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ –±–∞–π—Ç–∞—Ö, –∞ –∑–Ω–∞—á–∏—Ç –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞—é –≤ –Ω–∏—Ö)
                    info = json.loads(data.content)
                    if info["result"] is not None and info["result"].get("size", 0) > 31457280:
                        markup = telebot.types.InlineKeyboardMarkup()
                        markup.add(telebot.types.InlineKeyboardButton(text='–°–∫–∞—á–∞—Ç—å',
                                                                      url=SERVER_ADDRESS+f'/download/{mes}'))
                        await bot.send_message(message.chat.id,
                                               f"–û–≥–æ! `{info['result'].get('name', str(mes))}` –≤–µ—Å–∏—Ç {round(info['result'].get('size', 1)/1048576, 1)} –º–µ–≥–∞–±–∞–π—Ç!\n–°–∫–∞—á–∞–π –µ–≥–æ –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ üòÉ",
                                               parse_mode="Markdown", reply_markup=markup)
                        return
                except:
                    await bot.reply_to(message, "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç üòî _(point=4)_", parse_mode="Markdown")
                    return -1

                try:
                    result = requests.get(url=SERVER_ADDRESS+f"/download/steam/{str(mes)}", timeout=5)
                except:
                    await bot.reply_to(message, "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç üòî _(point=1)_", parse_mode="Markdown")
                    return -1

                if result.headers.get('content-type') == "application/zip":
                    await bot.send_document(
                        message.chat.id,
                        visible_file_name=await tools.get_name(result.headers["content-disposition"]),
                        document=result.content,
                        reply_to_message_id=message.id,
                        timeout=10)
                    await bot.reply_to(message, f"–í–∞—à –∑–∞–ø—Ä–æ—Å –∑–∞–Ω—è–ª {await tools.format_seconds(round(time.time()-start_time, 1))}")
                elif result.headers.get('content-type') == "application/json":
                    data = json.loads(result.content)
                    if data["error_id"] == 0 or data["error_id"] == 3:
                        await bot.reply_to(message, "–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç—É —ç—Ç–æ–≥–æ –º–æ–¥–∞, –Ω–æ –æ–Ω —Å–µ–π—á–∞—Å –µ–≥–æ –∑–∞–≥—Ä—É–∑–∏—Ç! _(—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è)_", parse_mode="Markdown")

                        for i in range(60):
                            time.sleep(1)
                            try:
                                res = requests.get(url=SERVER_ADDRESS+f"/condition/mod/%5B{str(mes)}%5D",
                                                        timeout=10)
                            except:
                                await bot.reply_to(message, "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç üòî _(point=2)_", parse_mode="Markdown")
                                return -1
                            if res.headers.get('content-type') == "application/json":
                                data = json.loads(res.content)
                                if data.get(str(mes), None) == None:
                                    await bot.reply_to(message, "–°–µ—Ä–≤–µ—Ä—É –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç—Ç–æ—Ç –º–æ–¥ üò¢")
                                    return -1
                                elif data[str(mes)] <= 1:
                                    try:
                                        data = requests.get(url=SERVER_ADDRESS+f"/info/mod/{str(mes)}",
                                                            timeout=10)

                                        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 30 –º–± (–ø–æ–ª—É—á–∞—é –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ –±–∞–π—Ç–∞—Ö, –∞ –∑–Ω–∞—á–∏—Ç –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞—é –≤ –Ω–∏—Ö)
                                        info = json.loads(data.content)
                                        if info["result"] is not None and info["result"].get("size", 0) > 31457280:
                                            markup = telebot.types.InlineKeyboardMarkup()
                                            markup.add(telebot.types.InlineKeyboardButton(text='–°–∫–∞—á–∞—Ç—å',
                                                                                          url=SERVER_ADDRESS+f'/download/{mes}'))
                                            await bot.send_message(message.chat.id,
                                                                   f"–û–≥–æ! `{info['result'].get('name', str(mes))}` –≤–µ—Å–∏—Ç {round(info['result'].get('size', 1)/1048576, 1)} –º–µ–≥–∞–±–∞–π—Ç!\n–°–∫–∞—á–∞–π –µ–≥–æ –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ üòÉ",
                                                                   parse_mode="Markdown", reply_markup=markup)
                                            return
                                    except:
                                        await bot.reply_to(message, "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç üòî _(point=4)_",
                                                           parse_mode="Markdown")
                                        return -1

                                    try:
                                        result = requests.get(
                                            url=SERVER_ADDRESS+f"/download/{str(mes)}", timeout=10)
                                    except:
                                        await bot.reply_to(message, "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç üòî _(point=3)_", parse_mode="Markdown")
                                        return -1

                                    if result.headers.get('content-type') == "application/zip":
                                        await bot.send_document(
                                            message.chat.id,
                                            visible_file_name=await tools.get_name(result.headers["content-disposition"]),
                                            document=result.content,
                                            reply_to_message_id=message.id,
                                            timeout=10)
                                        await bot.reply_to(message, f"–í–∞—à –∑–∞–ø—Ä–æ—Å –∑–∞–Ω—è–ª {await tools.format_seconds(round(time.time()-start_time, 1))}")
                                    else:
                                        await bot.reply_to(message, "–°–µ—Ä–≤–µ—Ä –ø—Ä–∏—Å–ª–∞–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç üòß _(point=4)_",
                                                           parse_mode="Markdown")

                                    return
                            else:
                                await bot.reply_to(message, "–°–µ—Ä–≤–µ—Ä –ø—Ä–∏—Å–ª–∞–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç üòß _(point=1)_", parse_mode="Markdown")
                                return
                        await bot.reply_to(message, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞!")
                        return -1

                    elif data["error_id"] == 1:
                        await bot.reply_to(message,
                            "–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏ –Ω–µ –º–æ–∂–µ—Ç —Å–µ–π—á–∞—Å –≥—Ä—É–∑–∏—Ç—å –º–æ–¥—ã! –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç :)")
                    elif data["error_id"] == 2:
                        await bot.reply_to(message, "–°–µ—Ä–≤–µ—Ä –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ —Ç–∞–∫–æ–≥–æ –º–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç üò¢")
                    else:
                        await bot.reply_to(message, "–°–µ—Ä–≤–µ—Ä –ø—Ä–∏—Å–ª–∞–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç üòß _(point=2)_",
                                           parse_mode="Markdown")
                else:
                    await bot.reply_to(message, "–°–µ—Ä–≤–µ—Ä –ø—Ä–∏—Å–ª–∞–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç üòß _(point=3)_", parse_mode="Markdown")
        else:
            if mes.startswith("https://steamcommunity.com") or mes.startswith("https://store.steampowered.com"):
                await bot.reply_to(message, "–ú–Ω–µ –Ω—É–∂–Ω–∞ —Å—Å—ã–ª–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –Ω–∞ –º–æ–¥! _(–∏–ª–∏ –µ–≥–æ ID)_", parse_mode="Markdown")
            elif mes.startswith("https://") or mes.startswith("http://"):
                await bot.reply_to(message, "–ü–æ–∫–∞ —á—Ç–æ —è —É–º–µ—é —Å–∫–∞—á–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ Steam üòø")
            else:
                await bot.reply_to(message, "–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —Å–∫–∞—á–∞—Ç—å –º–æ–¥, —Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–∫–∏–Ω—å —Å—Å—ã–ª–∫—É –∏–ª–∏ `ID` –º–æ–¥–∞ –≤ —á–∞—Ç!",
                                   parse_mode="Markdown")
    except:
        await bot.reply_to(message, "–¢—ã –≤—ã–∑–≤–∞–ª —Å—Ç—Ä–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É...\n–ü–æ–ø—Ä–æ–±—É–π –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥ –µ—â–µ —Ä–∞–∑!",
                           parse_mode="Markdown")

import asyncio
asyncio.run(bot.polling())